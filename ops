#!/usr/bin/env python

"""
usage: ops [--version] [--exec-path=<path>]
           <command> [<args>...] [-?]

options:
    --version
    --exec-path

The most commonly used ops commands are:
    deploy deploy packages
    aws    perform aws operation
"""

import argparse
import dreambox.ops.deployment
import dreambox.ops.git_client
import yaml
import os

import dreambox.utils

def loadYamlConfig(yamlConfigFile):
    scriptDir = os.path.dirname(__file__)
    scriptEtc = os.path.join(scriptDir, 'etc')
    yamlConfigFilePath = os.path.join(scriptEtc, yamlConfigFile)
    with open(yamlConfigFilePath, 'r') as yamlh:
        config = yaml.load(yamlh)

    return config

def createCommandLineOptions(config):
    cmdOptParser = argparse.ArgumentParser(prog='ops', add_help=False)
    subParsers = cmdOptParser.add_subparsers()
    for app, config in config.items():
        print('app name %s' % app)
        dreambox.utils.print_structure(config)
        positionArgs = config['position']
        kwArgs = config['key-values']
        func = config['func']
        __buildCmdOptions(subParsers,
                          app,
                          positionArgs,
                          kwArgs,
                          func)

    return cmdOptParser.parse_args()



def __buildCmdOptions(subParsers=None, app=None, positionArgs=None, kwArgs=None, func=None):

    # first we create a sub-parser object
    subParser = subParsers.add_parser(app)

    # handling position arguments
    for positionArg, positionHelp in positionArgs.items():
        print('postion argument %s' % positionArg)
        subParser.add_argument(positionArg, help=positionHelp)

    # handling key-value arguments
    for optName, optSettings in kwArgs.items():
        optShort = '-%s' % optSettings['short']
        optLong = '--%s' % optName
        optDefault = optSettings['default']
        optType = optSettings['type']
        optDest = optSettings['dest']
        optHelp = optSettings['help']
        subParser.add_argument(optShort,
                               optLong,
                               type=optType,
                               dest=optDest,
                               help=optHelp,
                               default=optDefault
                              )

    subParser.set_defaults(func=func)

if __name__ == '__main__':
    yamlConfig = loadYamlConfig('conf.yml')
    args = createCommandLineOptions(yamlConfig)
    args.func(args)

    parser = argparse.ArgumentParser(prog='ops', add_help=False)
    subparsers = parser.add_subparsers()

    # sub command for revoke_all_ingress_rules_for_stage
    parser_revoke_ingress = subparsers.add_parser('revoke_all_ingress_rules_for_stage')
    parser_revoke_ingress.add_argument('stage', help='a stage environment you like to have security rules revoked')
    parser_revoke_ingress.add_argument('-n',
                                       '--dry-run',
                                       type=bool,
                                       dest='dry_run',
                                       default=False,
                                       help='a boolean flag direct the program to tells what happen, but will not execute')
    parser_revoke_ingress.set_defaults(func=dreambox.ops.deployment.revoke_all_ingress_rules_for_stage)

    # sub command for clone_env_apps
    parser_clone_env_apps = subparsers.add_parser('clone_env_apps')

    # positional arguments
    parser_clone_env_apps.add_argument('from_env', help='where should we clone environment from')
    parser_clone_env_apps.add_argument('to_env', help='where we should clone environment to')

    parser_clone_env_apps.add_argument('-p',
                                       '--repo-path',
                                       type=str,
                                       dest='repo_path',
                                       default='/tmp',
                                       help='a path where repo should clone to ')
    parser_clone_env_apps.add_argument('-o',
                                       '--repo-name',
                                       type=str,
                                       dest='repo_name',
                                       default='',
                                       help='the name of repo')
    parser_clone_env_apps.add_argument('-u',
                                       '--repo-url',
                                       type=str,
                                       dest='repo_url',
                                       default='git@github.com:dreamboxlearning/chef-environments.git',
                                       help='a github url where we can clone repo')
    parser_clone_env_apps.add_argument('-n',
                                       '--dry-run',
                                       type=bool,
                                       dest='dry_run',
                                       default='',
                                       help='a boolean flag direct the program to tells what happen, but will not execute')
    parser_clone_env_apps.set_defaults(func=dreambox.ops.git_client.clone_env_apps)
    args = parser.parse_args()
    args.func(args)

