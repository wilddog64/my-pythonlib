#!/usr/bin/env python

"""
usage: ops [--version] [--exec-path=<path>]
           <command> [<args>...] [-?]

options:
    --version
    --exec-path

The most commonly used ops commands are:
    deploy deploy packages
    aws    perform aws operation
"""

import argparse
import yaml
import os

def loadYamlConfig(yamlConfigFile):
    '''
loadYamlConfig is a function that will load the yaml configuration, conf.yml.
This function takes one parameter,

* yamlConfigFile is a yml configuration file.

loadYamlConfig return a python dict object when successfully load a yaml
configuration file.

Note: the function assume conf.yml file exist in current script ./etc directory.
you will need to make sure that ./etc/conf.yml exists.
    '''
    scriptDir = os.path.dirname(__file__)
    scriptEtc = os.path.join(scriptDir, 'etc')
    yamlConfigFilePath = os.path.join(scriptEtc, yamlConfigFile)
    with open(yamlConfigFilePath, 'r') as yamlh:
        config = yaml.load(yamlh)

    return config

def createSubCommandLineOptions(yamlConfigFile):
    '''
createSubCommandLineOptions is a function that builds sub-command command line
otions.  This function depends on argparse and pyYaml to build a usable command
line options.  The function take only one parameter,

* config which is a dict object return by a pyYaml load function

createSubCommandLineOptions will return a parsed args object back to caller
    '''
    config = loadYamlConfig(yamlConfigFile)
    cmdOptParser = argparse.ArgumentParser(prog='ops')
    subParsers = cmdOptParser.add_subparsers()
    for app, config in config.items():
        positionArgs = config['position']
        kwArgs = config['key-values']
        func = config['func']
        __buildCmdOptions(subParsers,
                          app,
                          positionArgs,
                          kwArgs,
                          func)

    args = cmdOptParser.parse_args()
    args.func(args)



def __buildCmdOptions(subParsers=None, app=None, positionArgs=None, kwArgs=None, func=None):

    # first we create a sub-parser object
    subParser = subParsers.add_parser(app)

    # handling position arguments
    for positionArg, positionHelp in positionArgs.items():
        subParser.add_argument(positionArg, help=positionHelp)

    # handling key-value arguments
    for optName, optSettings in kwArgs.items():
        optShort = '-%s' % optSettings['short']
        optLong = '--%s' % optName
        optDefault = optSettings['default']
        optType = optSettings['type']
        optDest = optSettings['dest']
        optHelp = optSettings['help']
        subParser.add_argument(optShort,
                               optLong,
                               type=optType,
                               dest=optDest,
                               help=optHelp,
                               default=optDefault
                              )

    subParser.set_defaults(func=func)

if __name__ == '__main__':
    createSubCommandLineOptions('conf.yml')
